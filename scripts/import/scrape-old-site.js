/**
 * Script to scrape documentary data from combatfilms.com/store.html
 * 
 * This script uses Puppeteer to extract documentary information from the old website
 * and formats it into a JSON structure compatible with the new store.
 * 
 * Usage:
 * 1. Install dependencies: npm install puppeteer cheerio
 * 2. Run: node scripts/import/scrape-old-site.js
 */

const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

(async () => {
  // Launch browser
  const browser = await puppeteer.launch({ headless: 'new' });
  const page = await browser.newPage();
  
  console.log('Navigating to combatfilms.com/store.html...');
  await page.goto('https://combatfilms.com/store.html', { waitUntil: 'networkidle2' });
  
  // Extract documentary data
  const documentaryData = await page.evaluate(() => {
    const documentaries = [];
    const documentaryElements = Array.from(document.querySelectorAll('.item-details-block'));
    
    documentaryElements.forEach((element, index) => {
      // Extract title - different films have different HTML structures
      const titleElement = element.querySelector('h3') || element.querySelector('h4');
      const title = titleElement ? titleElement.innerText.trim() : '';
      
      // Skip if no title found (not a documentary item)
      if (!title) return;
      
      // Extract subtitle - could be different depending on the film
      const subtitleElement = element.querySelector('.item-subtitle') || element.querySelector('h5');
      const subtitle = subtitleElement ? subtitleElement.innerText.trim() : '';
      
      // Extract description - usually a paragraph element
      const descriptionElement = element.querySelector('p');
      const description = descriptionElement ? descriptionElement.innerText.trim() : '';
      
      // Extract price information
      const priceElement = element.querySelector('.pricing');
      const institutionalPrice = 150.00; // Default institutional price
      const personalPrice = 14.99; // Default personal price
      
      // Extract image URL
      const imageElement = element.querySelector('img');
      const thumbnailUrl = imageElement ? imageElement.src : '';
      
      documentaries.push({
        id: `doc-${index + 1}`,
        title,
        subtitle,
        category: 'documentaries',
        thumbnail: thumbnailUrl || `https://placehold.co/600x400/333/fff?text=${encodeURIComponent(title)}`,
        shortDescription: description.substring(0, 150) + (description.length > 150 ? '...' : ''),
        fullDescription: description,
        institutionalPrice,
        personalPrice
      });
    });
    
    return documentaries;
  });
  
  console.log(`Found ${documentaryData.length} documentaries.`);
  
  // Format data for the new store
  const formattedDocumentaries = documentaryData.map((doc) => ({
    id: doc.id,
    title: doc.title,
    subtitle: doc.subtitle || '',
    category: 'documentaries',
    thumbnail: doc.thumbnail,
    shortDescription: doc.shortDescription,
    fullDescription: doc.fullDescription,
    institutionalPrice: doc.institutionalPrice,
    personalPrice: doc.personalPrice
  }));
  
  // Save to JSON file
  const outputDir = path.join(__dirname, '../../apps/web/src/app/(marketing)/store/_data');
  const outputFile = path.join(outputDir, 'imported-documentaries.json');
  
  fs.writeFileSync(outputFile, JSON.stringify(formattedDocumentaries, null, 2));
  console.log(`Saved documentary data to ${outputFile}`);
  
  // Create a TypeScript file to import the data
  const tsOutputFile = path.join(outputDir, 'imported-documentaries.ts');
  const tsContent = `
// This file was auto-generated by the scrape-old-site.js script
import { Product } from './products';

// Extended product interface to include institutional and personal prices
export interface DocumentaryProduct extends Product {
  institutionalPrice: number;
  personalPrice: number;
  subtitle?: string;
}

// Imported documentaries from the old website
export const importedDocumentaries: DocumentaryProduct[] = ${JSON.stringify(formattedDocumentaries, null, 2)};
  `;
  
  fs.writeFileSync(tsOutputFile, tsContent);
  console.log(`Saved TypeScript data to ${tsOutputFile}`);
  
  await browser.close();
  console.log('Done!');
})().catch(error => {
  console.error('Error:', error);
  process.exit(1);
}); 